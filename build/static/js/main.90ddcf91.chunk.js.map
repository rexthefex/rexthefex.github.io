{"version":3,"sources":["App.js","useLocalStorage.js","index.js"],"names":["App","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","items","setItems","columns","useMemo","res","Header","accessor","sticky","forEach","el","idx","push","timestamp","toString","dayjs","unix","format","availableCoinsInUSDT","length","data","filter","symbol","includes","endsWith","map","replace","volume","filteredUSDTCoins","parseFloat","sort","a","b","filteredItems","some","coin","href","target","currentItem","find","dataItem","previousItem","ts","lastPrice","Math","round","toFixed","change","useTable","initialState","sortBy","id","desc","useSortBy","useSticky","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useEffect","axios","defaults","baseURL","get","then","r","current","newItems","splice","unshift","quoteVolume","striped","bordered","hover","size","className","headerGroup","getHeaderGroupProps","headers","column","style","display","justifyContent","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","isNaN","onClick","row","getRowProps","cells","cell","getCellProps","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90ddcf91.chunk.js","sourcesContent":["import { useTable, useSortBy } from \"react-table\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport axios from \"axios\";\nimport BTable from \"react-bootstrap/Table\";\nimport { useLocalStorage } from \"./useLocalStorage\";\nimport dayjs from \"dayjs\";\nimport { useSticky } from \"react-table-sticky\";\n\nfunction App() {\n  const [items, setItems] = useLocalStorage(\"items\", []);\n  const columns = useMemo(() => {\n    let res = [\n      { Header: \"Symbol\", accessor: \"symbol\", sticky: 'left' },\n    ];\n    items?.forEach((el, idx) => {\n      if (idx !== 0) {\n        res.push({\n          Header: 'CHG',\n          accessor: el.timestamp.toString() + 'CHG',\n        });\n        res.push({\n          Header: 'VOL',\n          accessor: el.timestamp.toString() + 'VOL',\n        });\n      }\n      res.push({\n        Header: el.timestamp\n          ? dayjs.unix(el.timestamp).format(\"HH:mm:ss\")\n          : null,\n        accessor: el.timestamp.toString(),\n      });\n    });\n    return res;\n  }, [items]);\n\n  const availableCoinsInUSDT = useMemo(() => {\n    return items?.[items?.length - 1]?.data\n      .filter((el) => el.symbol.includes(\"USDT\"))\n      .filter(\n        (el) =>\n          !el.symbol.includes(\"BULL\") &&\n          !el.symbol.includes(\"BEAR\") &&\n          !el.symbol.includes(\"UP\") &&\n          !el.symbol.includes(\"DOWN\")\n      )\n      .filter((el) => el.symbol.endsWith(\"USDT\"))\n      .map((el) => ({\n        symbol: el.symbol.replace(\"USDT\", \"\"),\n        volume: el.volume,\n      }));\n  }, [items]);\n\n  const filteredUSDTCoins = useMemo(\n    () =>\n      availableCoinsInUSDT\n        ?.filter((el) => parseFloat(el.volume) > 100000)\n        .sort((a, b) => parseFloat(b.volume) - parseFloat(a.volume)),\n    [availableCoinsInUSDT]\n  );\n\n  const filteredItems = useMemo(() => {\n    const data = items?.[items.length - 1]?.data;\n    return data?.filter(\n      (el) =>\n        el.symbol.includes(\"BTC\") &&\n        filteredUSDTCoins.some((coin) => el.symbol.includes(coin.symbol))\n    ) || [];\n  }, [filteredUSDTCoins, items]);\n\n  const data = useMemo(\n    () =>\n      filteredItems.map((el) => {\n        const symbol = el.symbol;\n        const data = { symbol: <a href={'https://www.binance.com/en/trade/' + el.symbol} target={'_blank'}>{el.symbol}</a> };\n        items.forEach((item, idx) => {\n          const currentItem = item.data.find(\n            (dataItem) => dataItem.symbol === symbol\n          );\n          const previousItem = items[idx-1]?.data.find(\n            (dataItem) => dataItem.symbol === symbol\n          )\n          const ts = item.timestamp.toString();\n          if (currentItem?.lastPrice.endsWith('000000')) {\n            data[ts] = currentItem?.lastPrice.replace('000000', '');\n          } else {\n            data[ts] = currentItem?.lastPrice.replace('00000000', '');\n          }\n          data[ts + 'VOL'] = ((Math.round(previousItem?.volume /\n            currentItem?.volume * 1000) / 10) - 100).toFixed(1) + '%';\n          const change = (Math.round(previousItem?.lastPrice /\n            currentItem?.lastPrice * 1000) / 10) - 100;\n          if (change !== 0.0) {\n            data[ts + 'CHG'] = change.toFixed(1) + '%';\n          }\n        });\n        return data;\n      }) || [],\n    [items]\n  );\n\n  console.log({ columns, data, filteredUSDTCoins, filteredItems, items });\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: {\n        sortBy: [\n          {\n            id: 'Symbol',\n            desc: false,\n          }\n        ]\n      }\n\n    },\n    useSortBy,\n    useSticky\n  );\n\n  useEffect(() => {\n    axios.defaults.baseURL = \"https://api.binance.com\";\n    axios.get(\"/api/v3/ticker/24hr\").then((r) =>\n      setItems((current) => {\n        const newItems = [...current];\n        if (current.length > 10) {\n          newItems.splice(0, current.length - 9);\n        }\n        newItems.unshift({\n          timestamp: dayjs().unix(),\n          data: r.data.map((el) => ({\n            symbol: el.symbol,\n            volume: el.quoteVolume,\n            lastPrice: el.lastPrice,\n          })),\n        });\n        return newItems;\n      })\n    );\n  }, []);\n\n  return (\n    <BTable striped bordered hover size=\"sm\" {...getTableProps()} className={\"table sticky\"}>\n      <thead className={\"header\"}>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th>\n                <div style={{ display: \"flex\", justifyContent: \"space-between\"}}>\n                  <div {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {column.render(\"Header\")}\n                    {column.isSorted ? (column.isSortedDesc ? \"🔽\" : \"🔼\") : \"\"}\n                  </div>\n                  {!isNaN(column.id) && <a href='#' onClick={() =>\n                    setItems(current => {\n                      const idx = current.find(\n                        el => el.timestamp === +column.id);\n                      if (idx !== -1) {\n                        const newItems = [...current];\n                        newItems.splice(idx, 1);\n                        return newItems;\n                      }\n                    })}>X\n                  </a>}\n                </div>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell, idx) => (\n                <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </BTable>\n  );\n}\n\nexport default App;\n","import { useState } from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = value => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}